// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------

enum UserRole {
  ADVISOR
  VIEWER
}


enum PortfolioKind {
  CURRENT 
  PLAN      
}

enum AssetClass {
  EQUITIES
  FIXED_INCOME
  CASH
  REAL_ESTATE
  INTERNATIONAL
  ALTERNATIVES
}

enum GoalType {
  RETIREMENT
  SHORT_TERM
  MEDIUM_TERM
  OTHER
}

enum EventFrequency {
  ONE_TIME
  MONTHLY
  YEARLY
}

enum EventType {
  DEPOSIT
  WITHDRAWAL
  CONTRIBUTION
  EXPENSE
  REBALANCE
}

enum AlignmentCategory {
  GREEN          // > 90%
  YELLOW_LIGHT   // 90% a 70%
  YELLOW_DARK    // 70% a 50%
  RED            // < 50%
}

enum InsuranceType {
  LIFE
  DISABILITY
}

enum Status {
  ACTIVE
  INACTIVE
}

// ---------- MODELS ----------

model User {
  id            Int @id @default(autoincrement())
  name          String
  email         String @unique
  password      String 
  role          UserRole
  createdAt DateTime @default(now())
}

model Client {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  age            Int?
  status         Status    @default(ACTIVE)
  family_perfil  String?

  alignmentPercent  Decimal?  @db.Decimal(7,4)  
  alignmentCategory AlignmentCategory?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  goals          Goal[]
  portfolios     PortfolioSnapshot[]
  events         Event[]
  simulations    Simulation[]
  insurances     Insurance[]
}

model Goal {
  id          Int       @id @default(autoincrement())
  clientId    Int
  type        GoalType
  name        String
  targetValue Decimal   @db.Decimal(18,2)
  targetDate  DateTime
  notes       String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([type])
}

model PortfolioSnapshot {
  id          Int            @id @default(autoincrement())
  clientId    Int
  kind        PortfolioKind
  asOfDate    DateTime       @default(now())
  totalValue  Decimal        @db.Decimal(18,2)

  allocations WalletAllocation[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  client      Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, kind, asOfDate])
  @@unique([clientId, kind, asOfDate])
}

model WalletAllocation {
  id           Int           @id @default(autoincrement())
  snapshotId   Int
  assetClass   AssetClass
  percent      Decimal       @db.Decimal(6,3)

  snapshot     PortfolioSnapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)

  @@index([snapshotId])
  @@unique([snapshotId, assetClass]) 
}

model Event {
  id            Int            @id @default(autoincrement())
  clientId      Int
  type          EventType
  amount        Decimal        @db.Decimal(18,2)
  frequency     EventFrequency
  startDate     DateTime
  endDate       DateTime?    

  executionDay    Int?         
  executionMonth  Int?       
  description     String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([frequency, startDate])
}

model Simulation {
  id            Int        @id @default(autoincrement())
  clientId      Int
  name          String?
  version       Int        @default(1)

  realRate      Decimal    @db.Decimal(6,4) @default(0.0400)
  untilYear     Int        @default(2060)

  inputs        Json? 
  resultSeries  Json?

  alignmentPercent  Decimal?  @db.Decimal(7,4)
  alignmentCategory AlignmentCategory?

  createdAt     DateTime   @default(now())

  client        Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, createdAt])
}

model Insurance {
  id            Int          @id @default(autoincrement())
  clientId      Int
  type          InsuranceType
  coverage      Decimal      @db.Decimal(18,2)
  premium       Decimal?     @db.Decimal(18,2)
  provider      String?
  startDate     DateTime?
  endDate       DateTime?
  status        Status       @default(ACTIVE)

  notes         String?

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  client        Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([type, status])
}